error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:10:1
   |
LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable
   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   | |
   | help: make this a static item: `static`
   |
   = note: #[deny(clippy::declare_interior_mutable_const)] on by default

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:11:1
   |
LL | const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable
   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   | |
   | help: make this a static item: `static`

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:12:1
   |
LL | const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);
   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   | |
   | help: make this a static item: `static`

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:17:9
   |
LL |         const $name: $ty = $e;
   |         ^^^^^^^^^^^^^^^^^^^^^^
...
LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable
   | ------------------------------------------ in this macro invocation

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:41:5
   |
LL |     const ATOMIC: AtomicUsize; //~ ERROR interior mutable
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:45:5
   |
LL |     const INPUT: T;
   |     ^^^^^^^^^^^^^^^
   |
help: consider requiring `T` to be `Copy`
  --> $DIR/non_copy_const.rs:45:18
   |
LL |     const INPUT: T;
   |                  ^

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:48:5
   |
LL |     const ASSOC: Self::NonCopyType;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: consider requiring `<Self as Trait<T>>::NonCopyType` to be `Copy`
  --> $DIR/non_copy_const.rs:48:18
   |
LL |     const ASSOC: Self::NonCopyType;
   |                  ^^^^^^^^^^^^^^^^^

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:52:5
   |
LL |     const AN_INPUT: T = Self::INPUT;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: consider requiring `T` to be `Copy`
  --> $DIR/non_copy_const.rs:52:21
   |
LL |     const AN_INPUT: T = Self::INPUT;
   |                     ^

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:17:9
   |
LL |         const $name: $ty = $e;
   |         ^^^^^^^^^^^^^^^^^^^^^^
...
LL |     declare_const!(ANOTHER_INPUT: T = Self::INPUT); //~ ERROR interior mutable
   |     ----------------------------------------------- in this macro invocation

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:61:5
   |
LL |     const SELF_2: Self;
   |     ^^^^^^^^^^^^^^^^^^^
   |
help: consider requiring `Self` to be `Copy`
  --> $DIR/non_copy_const.rs:61:19
   |
LL |     const SELF_2: Self;
   |                   ^^^^

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:82:5
   |
LL |     const ASSOC_3: AtomicUsize = AtomicUsize::new(14); //~ ERROR interior mutable
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:85:5
   |
LL |     const U_SELF: U = U::SELF_2;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: consider requiring `U` to be `Copy`
  --> $DIR/non_copy_const.rs:85:19
   |
LL |     const U_SELF: U = U::SELF_2;
   |                   ^

error: a const item should never be interior mutable
  --> $DIR/non_copy_const.rs:88:5
   |
LL |     const T_ASSOC: T::NonCopyType = T::ASSOC;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: consider requiring `<T as Trait<u32>>::NonCopyType` to be `Copy`
  --> $DIR/non_copy_const.rs:88:20
   |
LL |     const T_ASSOC: T::NonCopyType = T::ASSOC;
   |                    ^^^^^^^^^^^^^^

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:95:5
   |
LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability
   |     ^^^^^^
   |
   = note: #[deny(clippy::borrow_interior_mutable_const)] on by default
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:96:16
   |
LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability
   |                ^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:98:5
   |
LL |     ATOMIC_USIZE_INIT.store(2, Ordering::SeqCst); //~ ERROR interior mutability
   |     ^^^^^^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:99:16
   |
LL |     assert_eq!(ATOMIC_USIZE_INIT.load(Ordering::SeqCst), 0); //~ ERROR interior mutability
   |                ^^^^^^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:102:22
   |
LL |     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability
   |                      ^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:103:25
   |
LL |     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability
   |                         ^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:104:27
   |
LL |     let _once_ref_4 = &&&&ONCE_INIT; //~ ERROR interior mutability
   |                           ^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:105:26
   |
LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability
   |                          ^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:116:14
   |
LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability
   |              ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:117:14
   |
LL |     let _ = &ATOMIC_TUPLE.0; //~ ERROR interior mutability
   |              ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:118:19
   |
LL |     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability
   |                   ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:119:14
   |
LL |     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability
   |              ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:120:13
   |
LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability
   |             ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:126:13
   |
LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability
   |             ^^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:131:5
   |
LL |     CELL.set(2); //~ ERROR interior mutability
   |     ^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:132:16
   |
LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability
   |                ^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:145:5
   |
LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability
   |     ^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: a const item with interior mutability should not be borrowed
  --> $DIR/non_copy_const.rs:146:16
   |
LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability
   |                ^^^^^^^^^^^
   |
   = help: assign this const to a local or static variable, and use the variable here

error: aborting due to 31 previous errors

