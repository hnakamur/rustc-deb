if_chain! {
    if let ExprKind::Block(ref block) = expr.node;
    if let StmtKind::Decl(ref decl, _) = block.node
    if let DeclKind::Local(ref local) = decl.node;
    if let Some(ref init) = local.init
    if let ExprKind::Match(ref expr, ref arms, MatchSource::ForLoopDesugar) = init.node;
    if let ExprKind::Call(ref func, ref args) = expr.node;
    if let ExprKind::Path(ref path) = func.node;
    if match_qpath(path, &["{{root}}", "std", "iter", "IntoIterator", "into_iter"]);
    if args.len() == 1;
    if let ExprKind::Struct(ref path1, ref fields, None) = args[0].node;
    if match_qpath(path1, &["{{root}}", "std", "ops", "Range"]);
    if fields.len() == 2;
    // unimplemented: field checks
    if arms.len() == 1;
    if let ExprKind::Loop(ref body, ref label, LoopSource::ForLoop) = arms[0].body.node;
    if let StmtKind::Decl(ref decl1, _) = body.node
    if let DeclKind::Local(ref local1) = decl1.node;
    if let PatKind::Binding(BindingAnnotation::Mutable, _, name, None) = local1.pat.node;
    if name.node.as_str() == "__next";
    if let StmtKind::Expr(ref e, _) = local1.pat.node
    if let ExprKind::Match(ref expr1, ref arms1, MatchSource::ForLoopDesugar) = e.node;
    if let ExprKind::Call(ref func1, ref args1) = expr1.node;
    if let ExprKind::Path(ref path2) = func1.node;
    if match_qpath(path2, &["{{root}}", "std", "iter", "Iterator", "next"]);
    if args1.len() == 1;
    if let ExprKind::AddrOf(MutMutable, ref inner) = args1[0].node;
    if let ExprKind::Path(ref path3) = inner.node;
    if match_qpath(path3, &["iter"]);
    if arms1.len() == 2;
    if let ExprKind::Assign(ref target, ref value) = arms1[0].body.node;
    if let ExprKind::Path(ref path4) = target.node;
    if match_qpath(path4, &["__next"]);
    if let ExprKind::Path(ref path5) = value.node;
    if match_qpath(path5, &["val"]);
    if arms1[0].pats.len() == 1;
    if let PatKind::TupleStruct(ref path6, ref fields1, None) = arms1[0].pats[0].node;
    if match_qpath(path6, &["{{root}}", "std", "option", "Option", "Some"]);
    if fields1.len() == 1;
    // unimplemented: field checks
    if let ExprKind::Break(ref destination, None) = arms1[1].body.node;
    if arms1[1].pats.len() == 1;
    if let PatKind::Path(ref path7) = arms1[1].pats[0].node;
    if match_qpath(path7, &["{{root}}", "std", "option", "Option", "None"]);
    if let StmtKind::Decl(ref decl2, _) = path7.node
    if let DeclKind::Local(ref local2) = decl2.node;
    if let Some(ref init1) = local2.init
    if let ExprKind::Path(ref path8) = init1.node;
    if match_qpath(path8, &["__next"]);
    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local2.pat.node;
    if name1.node.as_str() == "y";
    if let StmtKind::Expr(ref e1, _) = local2.pat.node
    if let ExprKind::Block(ref block1) = e1.node;
    if let StmtKind::Decl(ref decl3, _) = block1.node
    if let DeclKind::Local(ref local3) = decl3.node;
    if let Some(ref init2) = local3.init
    if let ExprKind::Path(ref path9) = init2.node;
    if match_qpath(path9, &["y"]);
    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name2, None) = local3.pat.node;
    if name2.node.as_str() == "z";
    if arms[0].pats.len() == 1;
    if let PatKind::Binding(BindingAnnotation::Mutable, _, name3, None) = arms[0].pats[0].node;
    if name3.node.as_str() == "iter";
    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name4, None) = local.pat.node;
    if name4.node.as_str() == "_result";
    if let ExprKind::Path(ref path10) = local.pat.node;
    if match_qpath(path10, &["_result"]);
    then {
        // report your lint here
    }
}
