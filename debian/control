Source: rust
Section: devel
Priority: extra
Maintainer: Rust Maintainers <pkg-rust-maintainers@lists.alioth.debian.org>
Uploaders: Jordan Justen <jordan.l.justen@intel.com>,
 Luca Bruno <lucab@debian.org>,
 Sylvestre Ledru <sylvestre@debian.org>,
 Angus Lees <gus@debian.org>
Build-Depends: debhelper (>= 9),
#               rust <!dlstage0>,
               autotools-dev,
               curl,
               python,
               nodejs,
               zlib1g-dev,
               libedit-dev,
               valgrind,
               git,
               ca-certificates <dlstage0>
Build-Depends-Indep: pandoc (>=1.9) <!nodocs>,
                     po4a <!nodocs>,
                     texlive-luatex <!nodocs>,
                     texlive-xetex <!nodocs>,
                     texlive-latex-base <!nodocs>,
                     texlive-generic-recommended <!nodocs>,
                     lmodern <!nodocs>
# git is necessary for 'make check'
Standards-Version: 3.9.6
Homepage: http://www.rust-lang.org/
Vcs-Git: git://git.debian.org/pkg-rust/rust.git
Vcs-Browser: http://git.debian.org/?p=pkg-rust/rust.git;a=summary

Package: rust
Architecture: amd64 i386
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: Rust systems programming language
 Rust is a curly-brace, block-structured expression language.  It
 visually resembles the C language family, but differs significantly
 in syntactic and semantic details.  Its design is oriented toward
 concerns of "programming in the large", that is, of creating and
 maintaining boundaries - both abstract and operational - that
 preserve large-system integrity, availability and concurrency.
 .
 It supports a mixture of imperative procedural, concurrent actor,
 object-oriented and pure functional styles.  Rust also supports
 generic programming and meta-programming, in both static and dynamic
 styles.

Package: rust-doc
Section: doc
Architecture: all
Build-Profiles: <!nodocs>
Depends: ${misc:Depends}
Description: Rust systems programming language - Documentation
 Rust is a curly-brace, block-structured expression language.  It
 visually resembles the C language family, but differs significantly
 in syntactic and semantic details.  Its design is oriented toward
 concerns of "programming in the large", that is, of creating and
 maintaining boundaries - both abstract and operational - that
 preserve large-system integrity, availability and concurrency.
 .
 It supports a mixture of imperative procedural, concurrent actor,
 object-oriented and pure functional styles.  Rust also supports
 generic programming and meta-programming, in both static and dynamic
 styles.
 .
 This package contains the documentation.
