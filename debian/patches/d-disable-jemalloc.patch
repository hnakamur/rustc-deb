commit 458ba7aeb5c1ad3e18dd5c0fe261e1004dbb7a42
Author: Aidan Hobson Sayers <aidanhs@cantab.net>
Date:   Tue Aug 1 15:37:10 2017 +0100

    Make a disable-jemalloc build work
    
    Fixes #43510

commit 56a07539c0efd865b33dd07cd14b97d8ba23c584
Author: Aidan Hobson Sayers <aidanhs@cantab.net>
Date:   Thu Aug 10 14:40:42 2017 +0100

    Fix cross-crate global allocators on windows

Index: rustc/src/librustc_trans/back/symbol_export.rs
===================================================================
--- rustc.orig/src/librustc_trans/back/symbol_export.rs
+++ rustc/src/librustc_trans/back/symbol_export.rs
@@ -14,6 +14,7 @@ use rustc::util::nodemap::FxHashMap;
 use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};
 use rustc::session::config;
 use rustc::ty::TyCtxt;
+use rustc_allocator::ALLOCATOR_METHODS;
 use syntax::attr;
 
 /// The SymbolExportLevel of a symbols specifies from which kinds of crates
@@ -58,6 +59,13 @@ impl ExportedSymbols {
             local_crate.push(("main".to_string(), SymbolExportLevel::C));
         }
 
+        if scx.sess().allocator_kind.get().is_some() {
+            for method in ALLOCATOR_METHODS {
+                local_crate.push((format!("__rust_{}", method.name),
+                                  SymbolExportLevel::Rust));
+            }
+        }
+
         if let Some(id) = scx.sess().derive_registrar_fn.get() {
             let def_id = scx.tcx().hir.local_def_id(id);
             let idx = def_id.index;
Index: rustc/src/libstd/lib.rs
===================================================================
--- rustc.orig/src/libstd/lib.rs
+++ rustc/src/libstd/lib.rs
@@ -319,6 +319,16 @@
 #![cfg_attr(not(stage0), default_lib_allocator)]
 #![cfg_attr(stage0, feature(associated_consts))]
 
+// Always use alloc_system during stage0 since we don't know if the alloc_*
+// crate the stage0 compiler will pick by default is available (most
+// obviously, if the user has disabled jemalloc in `./configure`).
+// `force_alloc_system` is *only* intended as a workaround for local rebuilds
+// with a rustc without jemalloc.
+#![cfg_attr(any(stage0, feature = "force_alloc_system"), feature(global_allocator))]
+#[cfg(any(stage0, feature = "force_alloc_system"))]
+#[global_allocator]
+static ALLOC: alloc_system::System = alloc_system::System;
+
 // Explicitly import the prelude. The compiler uses this same unstable attribute
 // to import the prelude implicitly when building crates that depend on std.
 #[prelude_import]
Index: rustc/src/tools/tidy/src/pal.rs
===================================================================
--- rustc.orig/src/tools/tidy/src/pal.rs
+++ rustc/src/tools/tidy/src/pal.rs
@@ -69,6 +69,7 @@ const EXCEPTION_PATHS: &'static [&'stati
     "src/libstd/path.rs",
     "src/libstd/f32.rs",
     "src/libstd/f64.rs",
+    "src/libstd/lib.rs", // Until next stage0 snapshot bump
     "src/libstd/sys_common/mod.rs",
     "src/libstd/sys_common/net.rs",
     "src/libterm", // Not sure how to make this crate portable, but test needs it
