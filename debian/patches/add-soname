Description: Set DT_SONAME when building dylibs
 In Rust, library filenames include a version-specific hash to help
 the run-time linker find the correct version.  Unlike in C/C++, the
 compiler looks for all libraries matching a glob that ignores the
 hash and reads embedded metadata to work out versions, etc.
 .
 The upshot is that there is no need for the usual "libfoo.so ->
 libfoo-1.2.3.so" symlink common with C/C++ when building with Rust,
 and no need to communicate an alternate filename to use at run-time
 vs compile time.  If linking to a Rust dylib from C/C++ however, a
 "libfoo.so -> libfoo-$hash.so" symlink may well be useful and in
 this case DT_SONAME=libfoo-$hash.so would be required.  More
 mundanely, various tools (eg: dpkg-shlibdeps) complain if they don't
 find DT_SONAME on shared libraries in public directories.
 .
 This patch passes -Wl,-soname=$outfile when building dylibs (and
 using a GNU linker).
Author: Angus Lees <gus@debian.org>
Forwarded: no

--- rustc-1.0.0~beta.orig/src/librustc_trans/back/link.rs
+++ rustc-1.0.0~beta/src/librustc_trans/back/link.rs
@@ -945,6 +945,12 @@ fn link_args(cmd: &mut Command,
         }
     }

+    if dylib && t.options.linker_is_gnu {
+        let mut v = OsString::from("-Wl,-soname=");
+        v.push(out_filename.file_name().unwrap());
+        cmd.arg(&v);
+    }
+
     if t.options.linker_is_gnu {
         // GNU-style linkers support optimization with -O. GNU ld doesn't need a
         // numeric argument, but other linkers do.
