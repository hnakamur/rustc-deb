Description: Dynamically link with Debian's LLVM
 Hard-code -lLLVM, instead of using llvm-config to figure out which components
 to link in. The latter doesn't work properly anyway for dynamic linking - see
 LLVM bug #3201. If/when this is fixed, then Rust upstream will probably fix
 their code to allow for this, and after that happens we can rm this patch.
 .
 TODO: not sure if we need extra tweaks for cross-compiling
Author: Ximin Luo <infinity0@debian.org>
Forwarded: not-needed
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/src/librustc_llvm/build.rs
+++ b/src/librustc_llvm/build.rs
@@ -154,55 +154,10 @@
 
     let (llvm_kind, llvm_link_arg) = detect_llvm_link(&llvm_config);
 
-    // Link in all LLVM libraries, if we're uwring the "wrong" llvm-config then
-    // we don't pick up system libs because unfortunately they're for the host
-    // of llvm-config, not the target that we're attempting to link.
-    let mut cmd = Command::new(&llvm_config);
-    cmd.arg("--libs");
-
-    if let Some(link_arg) = llvm_link_arg {
-        cmd.arg(link_arg);
-    }
-
-    if !is_crossed {
-        cmd.arg("--system-libs");
-    }
-    cmd.args(&components[..]);
-
-    for lib in output(&mut cmd).split_whitespace() {
-        let name = if lib.starts_with("-l") {
-            &lib[2..]
-        } else if lib.starts_with("-") {
-            &lib[1..]
-        } else if Path::new(lib).exists() {
-            // On MSVC llvm-config will print the full name to libraries, but
-            // we're only interested in the name part
-            let name = Path::new(lib).file_name().unwrap().to_str().unwrap();
-            name.trim_right_matches(".lib")
-        } else if lib.ends_with(".lib") {
-            // Some MSVC libraries just come up with `.lib` tacked on, so chop
-            // that off
-            lib.trim_right_matches(".lib")
-        } else {
-            continue;
-        };
-
-        // Don't need or want this library, but LLVM's CMake build system
-        // doesn't provide a way to disable it, so filter it here even though we
-        // may or may not have built it. We don't reference anything from this
-        // library and it otherwise may just pull in extra dependencies on
-        // libedit which we don't want
-        if name == "LLVMLineEditor" {
-            continue;
-        }
-
-        let kind = if name.starts_with("LLVM") {
-            llvm_kind
-        } else {
-            "dylib"
-        };
-        println!("cargo:rustc-link-lib={}={}", kind, name);
-    }
+     // Link in all LLVM libraries
+     // Link in Debian full LLVM shared library.
+     // FIXME: not sure what to do in the cross-compiling case.
+     println!("cargo:rustc-link-lib={}={}", "dylib", "LLVM-3.9");
 
     // LLVM ldflags
     //
